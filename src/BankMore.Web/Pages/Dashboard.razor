@page "/dashboard"
@using BankMore.Web.Services
@inject AccountsApiService AccountsApi
@inject AuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Dashboard - BankMore</PageTitle>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="container mt-5">
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Erro!</h4>
            <p>@errorMessage</p>
            <hr>
            <button class="btn btn-primary" @onclick="RetryLoad">Tentar Novamente</button>
            <button class="btn btn-secondary" @onclick="GoToLogin">Ir para Login</button>
        </div>
    </div>
}
else if (isLoading)
{
    <div class="container mt-5 text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Carregando...</span>
        </div>
        <p class="mt-3">Carregando informações da conta...</p>
    </div>
}
else if (balanceResponse != null)
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-12 mb-4">
                <div class="card shadow-lg border-primary">
                    <div class="card-header bg-primary text-white">
                        <h3 class="mb-0">
                            <i class="oi oi-account-login"></i> Olá, @balanceResponse.AccountHolderName
                        </h3>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-6">
                                <h5 class="text-muted">Conta</h5>
                                <h4 class="text-primary">@balanceResponse.AccountNumber</h4>
                            </div>
                            <div class="col-md-6">
                                <h5 class="text-muted">Saldo Disponível</h5>
                                <h2 class="text-success">R$ @balanceResponse.Balance.ToString("N2")</h2>
                            </div>
                        </div>
                        <hr />
                        <div class="row mt-3">
                            <div class="col-md-4">
                                <a href="/transfer" class="btn btn-primary w-100">
                                    <i class="oi oi-transfer"></i> Fazer Transferência
                                </a>
                            </div>
                            <div class="col-md-4">
                                <a href="/deposit" class="btn btn-success w-100">
                                    <i class="oi oi-plus"></i> Depositar
                                </a>
                            </div>
                            <div class="col-md-4">
                                <a href="/withdraw" class="btn btn-warning w-100">
                                    <i class="oi oi-minus"></i> Sacar
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card shadow">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0">Histórico de Tarifas</h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted">Consulte suas tarifas em <a href="/fees">Tarifas</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private BalanceResponse? balanceResponse;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            await LoadBalance();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar dashboard: {ex.Message}";
            isLoading = false;
            
            if (ex.Message.Contains("Não autenticado") || ex.Message.Contains("401") || ex.Message.Contains("autenticado"))
            {
                await AuthService.LogoutAsync();
                await Task.Delay(500); // Pequeno delay para garantir que o logout foi salvo
                Navigation.NavigateTo("/login");
            }
        }
    }

    private async Task LoadBalance()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            var accountNumber = await AuthService.GetAccountNumberAsync();
            
            if (string.IsNullOrEmpty(accountNumber))
            {
                throw new Exception("Número da conta não encontrado. Faça login novamente.");
            }
            
            balanceResponse = await AccountsApi.GetBalanceAsync(accountNumber);
            
            if (balanceResponse == null)
            {
                throw new Exception("Não foi possível carregar os dados da conta.");
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            
            if (ex.Message.Contains("Não autenticado") || 
                ex.Message.Contains("401") || 
                ex.Message.Contains("autenticado") ||
                ex.Message.Contains("timeout") ||
                ex.Message.Contains("demorou muito"))
            {
                // Não redireciona automaticamente, deixa o usuário tentar novamente
                errorMessage += " Verifique se a API está rodando.";
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Força atualização da UI
        }
    }

    private async Task RetryLoad()
    {
        await LoadBalance();
    }

    private async Task GoToLogin()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/login");
    }
}

